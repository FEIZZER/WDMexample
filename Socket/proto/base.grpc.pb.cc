// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: base.proto

#include "base.pb.h"
#include "base.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* Base_method_names[] = {
  "/Base/BaseTransmit",
  "/Base/StreamTransmit",
  "/Base/ClientStreamTransmit",
  "/Base/ServerStreamTransmit",
};

std::unique_ptr< Base::Stub> Base::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Base::Stub> stub(new Base::Stub(channel, options));
  return stub;
}

Base::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_BaseTransmit_(Base_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamTransmit_(Base_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_ClientStreamTransmit_(Base_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_ServerStreamTransmit_(Base_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status Base::Stub::BaseTransmit(::grpc::ClientContext* context, const ::BaseRequest& request, ::BaseReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::BaseRequest, ::BaseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BaseTransmit_, context, request, response);
}

void Base::Stub::async::BaseTransmit(::grpc::ClientContext* context, const ::BaseRequest* request, ::BaseReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::BaseRequest, ::BaseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BaseTransmit_, context, request, response, std::move(f));
}

void Base::Stub::async::BaseTransmit(::grpc::ClientContext* context, const ::BaseRequest* request, ::BaseReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BaseTransmit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::BaseReply>* Base::Stub::PrepareAsyncBaseTransmitRaw(::grpc::ClientContext* context, const ::BaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::BaseReply, ::BaseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BaseTransmit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::BaseReply>* Base::Stub::AsyncBaseTransmitRaw(::grpc::ClientContext* context, const ::BaseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBaseTransmitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::BaseRequest, ::BaseReply>* Base::Stub::StreamTransmitRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::BaseRequest, ::BaseReply>::Create(channel_.get(), rpcmethod_StreamTransmit_, context);
}

void Base::Stub::async::StreamTransmit(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::BaseRequest,::BaseReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::BaseRequest,::BaseReply>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamTransmit_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::BaseRequest, ::BaseReply>* Base::Stub::AsyncStreamTransmitRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::BaseRequest, ::BaseReply>::Create(channel_.get(), cq, rpcmethod_StreamTransmit_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::BaseRequest, ::BaseReply>* Base::Stub::PrepareAsyncStreamTransmitRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::BaseRequest, ::BaseReply>::Create(channel_.get(), cq, rpcmethod_StreamTransmit_, context, false, nullptr);
}

::grpc::ClientWriter< ::BaseRequest>* Base::Stub::ClientStreamTransmitRaw(::grpc::ClientContext* context, ::BaseReply* response) {
  return ::grpc::internal::ClientWriterFactory< ::BaseRequest>::Create(channel_.get(), rpcmethod_ClientStreamTransmit_, context, response);
}

void Base::Stub::async::ClientStreamTransmit(::grpc::ClientContext* context, ::BaseReply* response, ::grpc::ClientWriteReactor< ::BaseRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::BaseRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_ClientStreamTransmit_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::BaseRequest>* Base::Stub::AsyncClientStreamTransmitRaw(::grpc::ClientContext* context, ::BaseReply* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::BaseRequest>::Create(channel_.get(), cq, rpcmethod_ClientStreamTransmit_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::BaseRequest>* Base::Stub::PrepareAsyncClientStreamTransmitRaw(::grpc::ClientContext* context, ::BaseReply* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::BaseRequest>::Create(channel_.get(), cq, rpcmethod_ClientStreamTransmit_, context, response, false, nullptr);
}

::grpc::ClientReader< ::BaseReply>* Base::Stub::ServerStreamTransmitRaw(::grpc::ClientContext* context, const ::BaseRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::BaseReply>::Create(channel_.get(), rpcmethod_ServerStreamTransmit_, context, request);
}

void Base::Stub::async::ServerStreamTransmit(::grpc::ClientContext* context, const ::BaseRequest* request, ::grpc::ClientReadReactor< ::BaseReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::BaseReply>::Create(stub_->channel_.get(), stub_->rpcmethod_ServerStreamTransmit_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::BaseReply>* Base::Stub::AsyncServerStreamTransmitRaw(::grpc::ClientContext* context, const ::BaseRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::BaseReply>::Create(channel_.get(), cq, rpcmethod_ServerStreamTransmit_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::BaseReply>* Base::Stub::PrepareAsyncServerStreamTransmitRaw(::grpc::ClientContext* context, const ::BaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::BaseReply>::Create(channel_.get(), cq, rpcmethod_ServerStreamTransmit_, context, request, false, nullptr);
}

Base::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Base_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Base::Service, ::BaseRequest, ::BaseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Base::Service* service,
             ::grpc::ServerContext* ctx,
             const ::BaseRequest* req,
             ::BaseReply* resp) {
               return service->BaseTransmit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Base_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Base::Service, ::BaseRequest, ::BaseReply>(
          [](Base::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::BaseReply,
             ::BaseRequest>* stream) {
               return service->StreamTransmit(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Base_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Base::Service, ::BaseRequest, ::BaseReply>(
          [](Base::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::BaseRequest>* reader,
             ::BaseReply* resp) {
               return service->ClientStreamTransmit(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Base_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Base::Service, ::BaseRequest, ::BaseReply>(
          [](Base::Service* service,
             ::grpc::ServerContext* ctx,
             const ::BaseRequest* req,
             ::grpc::ServerWriter<::BaseReply>* writer) {
               return service->ServerStreamTransmit(ctx, req, writer);
             }, this)));
}

Base::Service::~Service() {
}

::grpc::Status Base::Service::BaseTransmit(::grpc::ServerContext* context, const ::BaseRequest* request, ::BaseReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Base::Service::StreamTransmit(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::BaseReply, ::BaseRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Base::Service::ClientStreamTransmit(::grpc::ServerContext* context, ::grpc::ServerReader< ::BaseRequest>* reader, ::BaseReply* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Base::Service::ServerStreamTransmit(::grpc::ServerContext* context, const ::BaseRequest* request, ::grpc::ServerWriter< ::BaseReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}



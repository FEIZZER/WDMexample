// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ez.proto
#ifndef GRPC_ez_2eproto__INCLUDED
#define GRPC_ez_2eproto__INCLUDED

#include "ez.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class Communication final {
 public:
  static constexpr char const* service_full_name() {
    return "Communication";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status UnaryCommunicate(::grpc::ClientContext* context, const ::Package& request, ::Package* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Package>> AsyncUnaryCommunicate(::grpc::ClientContext* context, const ::Package& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Package>>(AsyncUnaryCommunicateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Package>> PrepareAsyncUnaryCommunicate(::grpc::ClientContext* context, const ::Package& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Package>>(PrepareAsyncUnaryCommunicateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::Package>> ClientStreamCommunicate(::grpc::ClientContext* context, ::Package* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::Package>>(ClientStreamCommunicateRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::Package>> AsyncClientStreamCommunicate(::grpc::ClientContext* context, ::Package* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::Package>>(AsyncClientStreamCommunicateRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::Package>> PrepareAsyncClientStreamCommunicate(::grpc::ClientContext* context, ::Package* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::Package>>(PrepareAsyncClientStreamCommunicateRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::Package>> ServerStreamCommunicate(::grpc::ClientContext* context, const ::Package& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::Package>>(ServerStreamCommunicateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Package>> AsyncServerStreamCommunicate(::grpc::ClientContext* context, const ::Package& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Package>>(AsyncServerStreamCommunicateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Package>> PrepareAsyncServerStreamCommunicate(::grpc::ClientContext* context, const ::Package& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Package>>(PrepareAsyncServerStreamCommunicateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::Package, ::Package>> BidirectionStreamCommunicate(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::Package, ::Package>>(BidirectionStreamCommunicateRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Package, ::Package>> AsyncBidirectionStreamCommunicate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Package, ::Package>>(AsyncBidirectionStreamCommunicateRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Package, ::Package>> PrepareAsyncBidirectionStreamCommunicate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Package, ::Package>>(PrepareAsyncBidirectionStreamCommunicateRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void UnaryCommunicate(::grpc::ClientContext* context, const ::Package* request, ::Package* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnaryCommunicate(::grpc::ClientContext* context, const ::Package* request, ::Package* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ClientStreamCommunicate(::grpc::ClientContext* context, ::Package* response, ::grpc::ClientWriteReactor< ::Package>* reactor) = 0;
      virtual void ServerStreamCommunicate(::grpc::ClientContext* context, const ::Package* request, ::grpc::ClientReadReactor< ::Package>* reactor) = 0;
      virtual void BidirectionStreamCommunicate(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::Package,::Package>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Package>* AsyncUnaryCommunicateRaw(::grpc::ClientContext* context, const ::Package& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Package>* PrepareAsyncUnaryCommunicateRaw(::grpc::ClientContext* context, const ::Package& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::Package>* ClientStreamCommunicateRaw(::grpc::ClientContext* context, ::Package* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::Package>* AsyncClientStreamCommunicateRaw(::grpc::ClientContext* context, ::Package* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::Package>* PrepareAsyncClientStreamCommunicateRaw(::grpc::ClientContext* context, ::Package* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::Package>* ServerStreamCommunicateRaw(::grpc::ClientContext* context, const ::Package& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Package>* AsyncServerStreamCommunicateRaw(::grpc::ClientContext* context, const ::Package& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Package>* PrepareAsyncServerStreamCommunicateRaw(::grpc::ClientContext* context, const ::Package& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::Package, ::Package>* BidirectionStreamCommunicateRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::Package, ::Package>* AsyncBidirectionStreamCommunicateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::Package, ::Package>* PrepareAsyncBidirectionStreamCommunicateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status UnaryCommunicate(::grpc::ClientContext* context, const ::Package& request, ::Package* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Package>> AsyncUnaryCommunicate(::grpc::ClientContext* context, const ::Package& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Package>>(AsyncUnaryCommunicateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Package>> PrepareAsyncUnaryCommunicate(::grpc::ClientContext* context, const ::Package& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Package>>(PrepareAsyncUnaryCommunicateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::Package>> ClientStreamCommunicate(::grpc::ClientContext* context, ::Package* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::Package>>(ClientStreamCommunicateRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::Package>> AsyncClientStreamCommunicate(::grpc::ClientContext* context, ::Package* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::Package>>(AsyncClientStreamCommunicateRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::Package>> PrepareAsyncClientStreamCommunicate(::grpc::ClientContext* context, ::Package* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::Package>>(PrepareAsyncClientStreamCommunicateRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::Package>> ServerStreamCommunicate(::grpc::ClientContext* context, const ::Package& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::Package>>(ServerStreamCommunicateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Package>> AsyncServerStreamCommunicate(::grpc::ClientContext* context, const ::Package& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Package>>(AsyncServerStreamCommunicateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Package>> PrepareAsyncServerStreamCommunicate(::grpc::ClientContext* context, const ::Package& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Package>>(PrepareAsyncServerStreamCommunicateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::Package, ::Package>> BidirectionStreamCommunicate(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::Package, ::Package>>(BidirectionStreamCommunicateRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::Package, ::Package>> AsyncBidirectionStreamCommunicate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::Package, ::Package>>(AsyncBidirectionStreamCommunicateRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::Package, ::Package>> PrepareAsyncBidirectionStreamCommunicate(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::Package, ::Package>>(PrepareAsyncBidirectionStreamCommunicateRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void UnaryCommunicate(::grpc::ClientContext* context, const ::Package* request, ::Package* response, std::function<void(::grpc::Status)>) override;
      void UnaryCommunicate(::grpc::ClientContext* context, const ::Package* request, ::Package* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ClientStreamCommunicate(::grpc::ClientContext* context, ::Package* response, ::grpc::ClientWriteReactor< ::Package>* reactor) override;
      void ServerStreamCommunicate(::grpc::ClientContext* context, const ::Package* request, ::grpc::ClientReadReactor< ::Package>* reactor) override;
      void BidirectionStreamCommunicate(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::Package,::Package>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Package>* AsyncUnaryCommunicateRaw(::grpc::ClientContext* context, const ::Package& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Package>* PrepareAsyncUnaryCommunicateRaw(::grpc::ClientContext* context, const ::Package& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::Package>* ClientStreamCommunicateRaw(::grpc::ClientContext* context, ::Package* response) override;
    ::grpc::ClientAsyncWriter< ::Package>* AsyncClientStreamCommunicateRaw(::grpc::ClientContext* context, ::Package* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::Package>* PrepareAsyncClientStreamCommunicateRaw(::grpc::ClientContext* context, ::Package* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::Package>* ServerStreamCommunicateRaw(::grpc::ClientContext* context, const ::Package& request) override;
    ::grpc::ClientAsyncReader< ::Package>* AsyncServerStreamCommunicateRaw(::grpc::ClientContext* context, const ::Package& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::Package>* PrepareAsyncServerStreamCommunicateRaw(::grpc::ClientContext* context, const ::Package& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::Package, ::Package>* BidirectionStreamCommunicateRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::Package, ::Package>* AsyncBidirectionStreamCommunicateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::Package, ::Package>* PrepareAsyncBidirectionStreamCommunicateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UnaryCommunicate_;
    const ::grpc::internal::RpcMethod rpcmethod_ClientStreamCommunicate_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerStreamCommunicate_;
    const ::grpc::internal::RpcMethod rpcmethod_BidirectionStreamCommunicate_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status UnaryCommunicate(::grpc::ServerContext* context, const ::Package* request, ::Package* response);
    virtual ::grpc::Status ClientStreamCommunicate(::grpc::ServerContext* context, ::grpc::ServerReader< ::Package>* reader, ::Package* response);
    virtual ::grpc::Status ServerStreamCommunicate(::grpc::ServerContext* context, const ::Package* request, ::grpc::ServerWriter< ::Package>* writer);
    virtual ::grpc::Status BidirectionStreamCommunicate(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::Package, ::Package>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_UnaryCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnaryCommunicate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UnaryCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnaryCommunicate(::grpc::ServerContext* /*context*/, const ::Package* /*request*/, ::Package* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnaryCommunicate(::grpc::ServerContext* context, ::Package* request, ::grpc::ServerAsyncResponseWriter< ::Package>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClientStreamCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClientStreamCommunicate() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ClientStreamCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStreamCommunicate(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::Package>* /*reader*/, ::Package* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClientStreamCommunicate(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::Package, ::Package>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerStreamCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerStreamCommunicate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ServerStreamCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamCommunicate(::grpc::ServerContext* /*context*/, const ::Package* /*request*/, ::grpc::ServerWriter< ::Package>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerStreamCommunicate(::grpc::ServerContext* context, ::Package* request, ::grpc::ServerAsyncWriter< ::Package>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BidirectionStreamCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BidirectionStreamCommunicate() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_BidirectionStreamCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidirectionStreamCommunicate(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Package, ::Package>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBidirectionStreamCommunicate(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::Package, ::Package>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UnaryCommunicate<WithAsyncMethod_ClientStreamCommunicate<WithAsyncMethod_ServerStreamCommunicate<WithAsyncMethod_BidirectionStreamCommunicate<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_UnaryCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UnaryCommunicate() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Package, ::Package>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Package* request, ::Package* response) { return this->UnaryCommunicate(context, request, response); }));}
    void SetMessageAllocatorFor_UnaryCommunicate(
        ::grpc::MessageAllocator< ::Package, ::Package>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Package, ::Package>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UnaryCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnaryCommunicate(::grpc::ServerContext* /*context*/, const ::Package* /*request*/, ::Package* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnaryCommunicate(
      ::grpc::CallbackServerContext* /*context*/, const ::Package* /*request*/, ::Package* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ClientStreamCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ClientStreamCommunicate() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::Package, ::Package>(
            [this](
                   ::grpc::CallbackServerContext* context, ::Package* response) { return this->ClientStreamCommunicate(context, response); }));
    }
    ~WithCallbackMethod_ClientStreamCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStreamCommunicate(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::Package>* /*reader*/, ::Package* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::Package>* ClientStreamCommunicate(
      ::grpc::CallbackServerContext* /*context*/, ::Package* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ServerStreamCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServerStreamCommunicate() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::Package, ::Package>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Package* request) { return this->ServerStreamCommunicate(context, request); }));
    }
    ~WithCallbackMethod_ServerStreamCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamCommunicate(::grpc::ServerContext* /*context*/, const ::Package* /*request*/, ::grpc::ServerWriter< ::Package>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::Package>* ServerStreamCommunicate(
      ::grpc::CallbackServerContext* /*context*/, const ::Package* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BidirectionStreamCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BidirectionStreamCommunicate() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::Package, ::Package>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->BidirectionStreamCommunicate(context); }));
    }
    ~WithCallbackMethod_BidirectionStreamCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidirectionStreamCommunicate(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Package, ::Package>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::Package, ::Package>* BidirectionStreamCommunicate(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_UnaryCommunicate<WithCallbackMethod_ClientStreamCommunicate<WithCallbackMethod_ServerStreamCommunicate<WithCallbackMethod_BidirectionStreamCommunicate<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_UnaryCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnaryCommunicate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UnaryCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnaryCommunicate(::grpc::ServerContext* /*context*/, const ::Package* /*request*/, ::Package* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClientStreamCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClientStreamCommunicate() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ClientStreamCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStreamCommunicate(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::Package>* /*reader*/, ::Package* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerStreamCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerStreamCommunicate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ServerStreamCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamCommunicate(::grpc::ServerContext* /*context*/, const ::Package* /*request*/, ::grpc::ServerWriter< ::Package>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BidirectionStreamCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BidirectionStreamCommunicate() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_BidirectionStreamCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidirectionStreamCommunicate(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Package, ::Package>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnaryCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnaryCommunicate() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_UnaryCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnaryCommunicate(::grpc::ServerContext* /*context*/, const ::Package* /*request*/, ::Package* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnaryCommunicate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClientStreamCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClientStreamCommunicate() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ClientStreamCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStreamCommunicate(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::Package>* /*reader*/, ::Package* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClientStreamCommunicate(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerStreamCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerStreamCommunicate() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ServerStreamCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamCommunicate(::grpc::ServerContext* /*context*/, const ::Package* /*request*/, ::grpc::ServerWriter< ::Package>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerStreamCommunicate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BidirectionStreamCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BidirectionStreamCommunicate() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_BidirectionStreamCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidirectionStreamCommunicate(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Package, ::Package>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBidirectionStreamCommunicate(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UnaryCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UnaryCommunicate() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnaryCommunicate(context, request, response); }));
    }
    ~WithRawCallbackMethod_UnaryCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnaryCommunicate(::grpc::ServerContext* /*context*/, const ::Package* /*request*/, ::Package* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnaryCommunicate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ClientStreamCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ClientStreamCommunicate() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->ClientStreamCommunicate(context, response); }));
    }
    ~WithRawCallbackMethod_ClientStreamCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStreamCommunicate(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::Package>* /*reader*/, ::Package* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* ClientStreamCommunicate(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServerStreamCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServerStreamCommunicate() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ServerStreamCommunicate(context, request); }));
    }
    ~WithRawCallbackMethod_ServerStreamCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamCommunicate(::grpc::ServerContext* /*context*/, const ::Package* /*request*/, ::grpc::ServerWriter< ::Package>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ServerStreamCommunicate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BidirectionStreamCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BidirectionStreamCommunicate() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->BidirectionStreamCommunicate(context); }));
    }
    ~WithRawCallbackMethod_BidirectionStreamCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidirectionStreamCommunicate(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::Package, ::Package>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* BidirectionStreamCommunicate(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnaryCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnaryCommunicate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Package, ::Package>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Package, ::Package>* streamer) {
                       return this->StreamedUnaryCommunicate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UnaryCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnaryCommunicate(::grpc::ServerContext* /*context*/, const ::Package* /*request*/, ::Package* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnaryCommunicate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Package,::Package>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UnaryCommunicate<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ServerStreamCommunicate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ServerStreamCommunicate() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::Package, ::Package>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::Package, ::Package>* streamer) {
                       return this->StreamedServerStreamCommunicate(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ServerStreamCommunicate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerStreamCommunicate(::grpc::ServerContext* /*context*/, const ::Package* /*request*/, ::grpc::ServerWriter< ::Package>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedServerStreamCommunicate(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::Package,::Package>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ServerStreamCommunicate<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_UnaryCommunicate<WithSplitStreamingMethod_ServerStreamCommunicate<Service > > StreamedService;
};


#endif  // GRPC_ez_2eproto__INCLUDED

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ez.proto

#include "ez.pb.h"
#include "ez.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* Communication_method_names[] = {
  "/Communication/UnaryCommunicate",
  "/Communication/ClientStreamCommunicate",
  "/Communication/ServerStreamCommunicate",
  "/Communication/BidirectionStreamCommunicate",
};

std::unique_ptr< Communication::Stub> Communication::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Communication::Stub> stub(new Communication::Stub(channel, options));
  return stub;
}

Communication::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UnaryCommunicate_(Communication_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClientStreamCommunicate_(Communication_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_ServerStreamCommunicate_(Communication_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_BidirectionStreamCommunicate_(Communication_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status Communication::Stub::UnaryCommunicate(::grpc::ClientContext* context, const ::Package& request, ::Package* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Package, ::Package, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnaryCommunicate_, context, request, response);
}

void Communication::Stub::async::UnaryCommunicate(::grpc::ClientContext* context, const ::Package* request, ::Package* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Package, ::Package, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnaryCommunicate_, context, request, response, std::move(f));
}

void Communication::Stub::async::UnaryCommunicate(::grpc::ClientContext* context, const ::Package* request, ::Package* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnaryCommunicate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Package>* Communication::Stub::PrepareAsyncUnaryCommunicateRaw(::grpc::ClientContext* context, const ::Package& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Package, ::Package, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnaryCommunicate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Package>* Communication::Stub::AsyncUnaryCommunicateRaw(::grpc::ClientContext* context, const ::Package& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnaryCommunicateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::Package>* Communication::Stub::ClientStreamCommunicateRaw(::grpc::ClientContext* context, ::Package* response) {
  return ::grpc::internal::ClientWriterFactory< ::Package>::Create(channel_.get(), rpcmethod_ClientStreamCommunicate_, context, response);
}

void Communication::Stub::async::ClientStreamCommunicate(::grpc::ClientContext* context, ::Package* response, ::grpc::ClientWriteReactor< ::Package>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::Package>::Create(stub_->channel_.get(), stub_->rpcmethod_ClientStreamCommunicate_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::Package>* Communication::Stub::AsyncClientStreamCommunicateRaw(::grpc::ClientContext* context, ::Package* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::Package>::Create(channel_.get(), cq, rpcmethod_ClientStreamCommunicate_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::Package>* Communication::Stub::PrepareAsyncClientStreamCommunicateRaw(::grpc::ClientContext* context, ::Package* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::Package>::Create(channel_.get(), cq, rpcmethod_ClientStreamCommunicate_, context, response, false, nullptr);
}

::grpc::ClientReader< ::Package>* Communication::Stub::ServerStreamCommunicateRaw(::grpc::ClientContext* context, const ::Package& request) {
  return ::grpc::internal::ClientReaderFactory< ::Package>::Create(channel_.get(), rpcmethod_ServerStreamCommunicate_, context, request);
}

void Communication::Stub::async::ServerStreamCommunicate(::grpc::ClientContext* context, const ::Package* request, ::grpc::ClientReadReactor< ::Package>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::Package>::Create(stub_->channel_.get(), stub_->rpcmethod_ServerStreamCommunicate_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::Package>* Communication::Stub::AsyncServerStreamCommunicateRaw(::grpc::ClientContext* context, const ::Package& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Package>::Create(channel_.get(), cq, rpcmethod_ServerStreamCommunicate_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::Package>* Communication::Stub::PrepareAsyncServerStreamCommunicateRaw(::grpc::ClientContext* context, const ::Package& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Package>::Create(channel_.get(), cq, rpcmethod_ServerStreamCommunicate_, context, request, false, nullptr);
}

::grpc::ClientReaderWriter< ::Package, ::Package>* Communication::Stub::BidirectionStreamCommunicateRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::Package, ::Package>::Create(channel_.get(), rpcmethod_BidirectionStreamCommunicate_, context);
}

void Communication::Stub::async::BidirectionStreamCommunicate(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::Package,::Package>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::Package,::Package>::Create(stub_->channel_.get(), stub_->rpcmethod_BidirectionStreamCommunicate_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::Package, ::Package>* Communication::Stub::AsyncBidirectionStreamCommunicateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::Package, ::Package>::Create(channel_.get(), cq, rpcmethod_BidirectionStreamCommunicate_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::Package, ::Package>* Communication::Stub::PrepareAsyncBidirectionStreamCommunicateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::Package, ::Package>::Create(channel_.get(), cq, rpcmethod_BidirectionStreamCommunicate_, context, false, nullptr);
}

Communication::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Communication_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Communication::Service, ::Package, ::Package, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Communication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Package* req,
             ::Package* resp) {
               return service->UnaryCommunicate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Communication_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Communication::Service, ::Package, ::Package>(
          [](Communication::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::Package>* reader,
             ::Package* resp) {
               return service->ClientStreamCommunicate(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Communication_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Communication::Service, ::Package, ::Package>(
          [](Communication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Package* req,
             ::grpc::ServerWriter<::Package>* writer) {
               return service->ServerStreamCommunicate(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Communication_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Communication::Service, ::Package, ::Package>(
          [](Communication::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::Package,
             ::Package>* stream) {
               return service->BidirectionStreamCommunicate(ctx, stream);
             }, this)));
}

Communication::Service::~Service() {
}

::grpc::Status Communication::Service::UnaryCommunicate(::grpc::ServerContext* context, const ::Package* request, ::Package* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Communication::Service::ClientStreamCommunicate(::grpc::ServerContext* context, ::grpc::ServerReader< ::Package>* reader, ::Package* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Communication::Service::ServerStreamCommunicate(::grpc::ServerContext* context, const ::Package* request, ::grpc::ServerWriter< ::Package>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Communication::Service::BidirectionStreamCommunicate(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::Package, ::Package>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


